package es.ua.dlsi.im3.omr.classifiers.symbolrecognition;

import es.ua.dlsi.im3.core.IM3Exception;
import es.ua.dlsi.im3.core.TestFileUtils;
import es.ua.dlsi.im3.core.patternmatching.RankingItem;
import es.ua.dlsi.im3.omr.encoding.agnostic.AgnosticVersion;
import es.ua.dlsi.im3.omr.model.entities.Point;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.TreeSet;

import static org.junit.Assert.*;

public class BimodalNearestNeighbourSymbolFromImageAndStrokesRecognizerTest {

    @Test
    public void classify() throws IOException, IM3Exception {
        File inputTrainingFile = TestFileUtils.getFile("/testdata/training/B-3.28.symbolsimages_30x30_strokes-extract.txt");
        BimodalNearestNeighbourSymbolFromImageAndStrokesRecognizer nearestNeighbourSymbolFromImageRecognizer = new BimodalNearestNeighbourSymbolFromImageAndStrokesRecognizer(AgnosticVersion.v2);
        nearestNeighbourSymbolFromImageRecognizer.trainWithFile(inputTrainingFile);
        assertEquals("Training instances", 100, nearestNeighbourSymbolFromImageRecognizer.getTrainedSet().size());

        // existing prototype
        List<Integer> pixelsExisting = Arrays.asList(72,169,211,198,194,194,184,184,186,183,183,172,172,159,83,42,32,86,148,202,193,188,183,182,176,178,184,217,203,192,83,166,203,196,192,186,185,184,188,185,187,176,172,155,85,54,42,94,161,210,203,192,185,183,183,182,188,210,201,195,96,159,195,197,195,183,182,183,187,192,195,181,166,150,89,61,33,89,169,215,209,193,184,187,190,191,197,202,205,200,96,159,195,197,195,183,182,183,187,192,195,181,166,150,89,61,33,89,169,215,209,193,184,187,190,191,197,202,205,200,92,145,187,193,191,177,179,181,182,192,193,178,162,142,88,59,26,71,159,204,205,192,183,187,186,190,201,198,205,207,70,129,178,181,180,169,172,173,170,181,178,167,153,133,82,50,21,49,136,182,186,182,178,177,166,173,197,199,203,209,56,115,162,165,163,160,164,161,158,163,158,153,142,117,68,39,17,31,123,167,160,163,166,159,139,149,186,200,205,204,50,98,139,140,144,146,151,146,142,141,138,135,122,94,51,30,12,16,97,144,134,141,147,134,106,127,165,188,204,207,54,90,124,124,129,141,147,140,134,131,129,125,112,81,43,27,10,14,76,123,119,127,132,113,81,106,129,156,184,209,54,90,124,124,129,141,147,140,134,131,129,125,112,81,43,27,10,14,76,123,119,127,132,113,81,106,129,156,184,209,59,97,124,123,131,146,154,147,137,132,135,131,120,86,46,34,9,22,76,121,120,123,133,110,76,88,95,116,154,203,65,112,136,132,148,153,163,159,146,143,150,150,138,99,52,38,11,36,95,136,130,132,147,120,80,78,80,88,124,188,71,133,157,157,172,165,177,175,161,159,170,171,162,120,59,38,16,49,121,164,150,148,160,140,107,85,80,81,108,177,74,147,174,173,184,176,185,181,175,175,180,183,177,137,61,35,19,54,137,183,169,164,169,157,137,104,86,90,109,183,79,159,185,183,184,179,188,189,187,185,188,188,188,156,64,35,17,53,147,184,184,183,176,173,164,123,86,91,109,187,79,159,185,183,184,179,188,189,187,185,188,188,188,156,64,35,17,53,147,184,184,183,176,173,164,123,86,91,109,187,78,163,195,189,185,182,189,195,196,193,193,190,198,172,72,39,15,52,140,167,184,197,184,187,181,136,88,86,120,194,76,164,202,195,188,188,190,199,197,196,195,196,201,180,86,47,18,51,116,138,167,199,192,191,179,135,90,82,139,201,77,166,203,198,193,193,192,198,196,194,200,203,199,182,94,50,19,49,89,110,147,195,192,182,163,119,91,84,156,203,88,174,201,197,196,194,197,198,194,192,202,205,196,178,100,55,21,51,68,77,117,183,184,162,135,101,100,102,171,206,100,180,199,196,196,193,200,196,191,192,198,202,192,170,99,59,30,59,66,56,82,150,166,138,109,95,113,125,183,209,100,180,199,196,196,193,200,196,191,192,198,202,192,170,99,59,30,59,66,56,82,150,166,138,109,95,113,125,183,209,105,173,202,197,199,192,198,193,189,195,196,200,189,172,96,61,51,76,85,58,50,105,142,122,94,106,124,143,190,209,105,174,199,195,201,196,192,190,192,195,194,201,192,173,99,60,56,86,107,67,29,52,104,103,93,121,139,160,194,207,102,175,200,196,202,200,188,188,194,197,193,199,195,175,101,59,45,78,131,87,26,23,75,101,115,144,158,175,195,205,102,177,206,199,201,202,189,188,195,200,194,197,192,174,101,54,30,59,144,111,41,32,71,115,144,166,177,188,194,199,114,177,207,202,199,200,192,187,197,204,199,202,194,181,100,54,24,51,156,144,69,54,83,131,165,182,188,197,198,199,114,177,207,202,199,200,192,187,197,204,199,202,194,181,100,54,24,51,156,144,69,54,83,131,165,182,188,197,198,199,134,180,207,203,197,198,195,187,196,206,205,204,197,188,95,57,28,51,160,181,125,94,109,148,175,189,195,201,200,202,150,186,208,203,197,200,195,187,194,206,205,202,200,187,91,64,38,56,155,204,177,133,133,160,182,189,199,200,201,207);
        GrayscaleImageData grayScaleImage = new GrayscaleImageData(pixelsExisting);
        assertEquals("Same image distance", 0.0, grayScaleImage.computeDistance(grayScaleImage), 0.0001);

        List<Object> pointsExpanded = Arrays.asList(471,155.93086,286.73166,471,155.93086,286.73166,471,156.87477,290.80215,471,158.29063,299.2971,471,159.05756,305.90427,471,159.41153,312.2165,471,160.00148,318.17477,471,160.29645,323.5431,471,160.41443,328.91144,471,160.41443,329.79633,471,160.41443,329.79633,471,159.88348,327.96756,471,159.35254,322.89417,471,159.11656,319.88556,471,158.99857,317.58484,471,158.99857,315.69705,471,159.7655,314.28125,471,161.59431,312.9834,471,163.24615,312.51147,471,165.31096,313.10138,471,167.37576,314.6352,471,169.44057,316.87692,471,171.68236,320.53445,471,171.80034,323.36612,471,170.97441,326.49274,471,168.85062,329.73734,471,163.8951,333.63086,471,160.7684,335.34164,471,157.40572,333.86682,471,156.4618,330.50424,471,156.4618,330.50424);
        if (pointsExpanded.size() % 3 != 0) {
            throw new IM3Exception("Invalid test data, must be %3 = 0, size="+ pointsExpanded.size());
        }
        PointsData pointsData = new PointsData();
        for (int i=0; i<pointsExpanded.size(); i+=3) {
            int time = (int)pointsExpanded.get(i);
            Point point = new Point(time, (double)pointsExpanded.get(i+1), (double)pointsExpanded.get(i+2));
            pointsData.addPoint(point);
        }

        SymbolImageAndPointsPrototype symbolImagePrototype = new SymbolImageAndPointsPrototype(null, grayScaleImage, pointsData);
        TreeSet<RankingItem<SymbolImageAndPointsPrototype>> rank = nearestNeighbourSymbolFromImageRecognizer.classify(symbolImagePrototype);

        // the exact match should be obtained
        assertEquals("Best match", "accidental.flat:S0", rank.first().getClassType().getPrototypeClass().getAgnosticString());

    }
}